generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  role         UserRole   @default(USER)
  firstName    String
  lastName     String
  state        String
  country      String
  businessType BusinessType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  domains       Domain[]
  transactions  Transaction[]
}

enum UserRole {
  ADMIN
  USER
}

model Domain {
  id            Int      @id @default(autoincrement())
  domainName    String   @unique
  price         Float
  description   String
  status        DomainStatus @default(PENDING)
  ownerId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  verifiedAt    DateTime?

  owner         User     @relation(fields: [ownerId], references: [id])
  transactions  Transaction[]
  ownerships    Ownership[]
}

enum DomainStatus {
  PENDING
  VERIFIED
  SOLD
}

model Ownership {
  id         Int      @id @default(autoincrement())
  domainId   Int
  sellerId   Int
  buyerId    Int
  soldPrice  Float
  soldAt     DateTime @default(now())

  domain     Domain   @relation(fields: [domainId], references: [id])
  seller     User     @relation("Seller", fields: [sellerId], references: [id])
  buyer      User     @relation("Buyer", fields: [buyerId], references: [id])
}


model Transaction {
  id            Int      @id @default(autoincrement())
  domainId      Int
  buyerId       Int
  sellerId      Int
  amount        Float
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  domain        Domain   @relation(fields: [domainId], references: [id])
  buyer         User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  seller        User     @relation("SellerTransactions", fields: [sellerId], references: [id])
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
